server.port=8071
spring.datasource.url=jdbc:mysql://127.0.0.1:3307/projectdb?createDatabaseIfNotExist=true
spring.datasource.username=root
spring.datasource.password=admin123
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true

# C?u hình Keycloak OAuth2 Client
spring.security.oauth2.client.registration.keycloak.client-id=your-client-id
spring.security.oauth2.client.registration.keycloak.client-secret=your-client-secret
spring.security.oauth2.client.registration.keycloak.scope=openid
spring.security.oauth2.client.provider.keycloak.token-uri=http://localhost:8181/realms/bookverse-mircoservices-security/protocol/openid-connect/token
spring.security.oauth2.client.provider.keycloak.authorization-uri=http://localhost:8181/realms/bookverse-mircoservices-security/protocol/openid-connect/auth
spring.security.oauth2.client.provider.keycloak.user-info-uri=http://localhost:8181/realms/bookverse-mircoservices-security/protocol/openid-connect/userinfo
spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8181/realms/bookverse-mircoservices-security

# C?u hình l?y JWT t? Keycloak (C?n có JWK Set URI ?? xác th?c ch? ký JWT)
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://localhost:8181/realms/bookverse-mircoservices-security/protocol/openid-connect/certs

# Swagger Configuration
springdoc.swagger-ui.path=/spring-ui.html
springdoc.api-docs.path=/api-docs

# Eureka Client Configuration
eureka.client.service-url.defaultZone=http://localhost:8761/eureka
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true

# Eureka Instance Configuration
eureka.instance.instance-id=${spring.application.name}:${server.port}
eureka.instance.hostname=localhost
eureka.instance.prefer-ip-address=true

# Docker Compose Configuration
spring.docker.compose.enabled=false
